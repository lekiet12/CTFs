data = open('hieroglyphs.txt','rb').read()
data = data.split(b'\n')
enc=open("message.txt",'rb').read()
idx = []
for i in range(0,len(enc),4):
    for j in range(len(data)):
        if enc[i:i+4]==data[j]:
            idx.append(j)
idx = idx[::-1]
for i in range(len(idx)-1,0,-1):
    idx[i] = idx[i-1]^idx[i]
cipher = idx 
def runvm(flag):
    opcode=[0]*(5920*10)
    v7 = 0
    v18=[0xaa,0xbb,0xcc,0xdd,0xee]
    for i in range(len(flag)) :
        opcode[v7] = 0
        opcode[v7 + 1] = 1
        v4 = v7 + 2
        v8 = v7 + 3
        opcode[v4] = flag[i]
        for j in range(10):
            opcode[v8] = 0
            opcode[v8 + 1] = 0
            opcode[v8 + 2] = v18[(10 * i + j) % 5]
            opcode[v8 + 3] = 8
            opcode[v8 + 4] = 1
            opcode[v8 + 5] = 3
            opcode[v8 + 6] = 3
            opcode[v8 + 7] = 1
            opcode[v8 + 8] = 1
            opcode[v8 + 9] = 1
            opcode[v8 + 10] = 0
            opcode[v8 + 11] = 2
            opcode[v8 + 12] = 1
            v5 = v8 + 13
            v8 += 14
            opcode[v5] = 3
        opcode[v8] = 4
        opcode[v8 + 1] = 1
        v6 = v8 + 2
        v7 = v8 + 3
        opcode[v6] = i
    opcode[v7] = 7

    index = 0
    v25 = True
    regs = [0] * 8
    memory = [0] * 59120  
    sbox = [ 0x48, 0x5C, 0xBC, 0x97, 0x81, 0x91, 0x60, 0xAD, 0x94, 0xCB, 
    0x92, 0x39, 0x1A, 0x0F, 0x30, 0x2D, 0x45, 0xDE, 0x14, 0xA2, 
    0x08, 0x57, 0xB6, 0xAE, 0x76, 0x8E, 0x87, 0x15, 0x0C, 0xE7, 
    0x62, 0xC8, 0x58, 0x29, 0x6D, 0xC9, 0xA7, 0xBE, 0x04, 0x49, 
    0x05, 0xFA, 0x75, 0x9F, 0xFD, 0x95, 0xBB, 0x5B, 0x79, 0xBF, 
    0xDA, 0xEB, 0x21, 0x9B, 0xA5, 0x82, 0x3A, 0x3E, 0xB9, 0x99, 
    0xF0, 0xF5, 0x6B, 0x06, 0xFC, 0xAF, 0xF2, 0xB0, 0x78, 0x86, 
    0xCF, 0xD4, 0x83, 0x59, 0x00, 0x4A, 0xB5, 0xFE, 0xAB, 0x3D, 
    0xC7, 0x8C, 0xE3, 0xC3, 0xE5, 0x03, 0x5A, 0x1D, 0x9D, 0x1F, 
    0x0A, 0x56, 0xC0, 0xBA, 0x43, 0x25, 0x77, 0x24, 0x7C, 0xA6, 
    0xDF, 0xF1, 0x4B, 0x44, 0xFF, 0x4C, 0xAA, 0xC1, 0x69, 0xF9, 
    0x38, 0x88, 0x9A, 0xA4, 0xE6, 0x10, 0xDC, 0xEA, 0x68, 0x8D, 
    0x5F, 0x63, 0xBD, 0x8B, 0xF3, 0x7E, 0xDB, 0x73, 0x5D, 0x65, 
    0x67, 0xA1, 0x72, 0xD8, 0xB1, 0x1B, 0x9E, 0x84, 0x16, 0x32, 
    0xE1, 0xF4, 0xEF, 0x93, 0xAC, 0x74, 0x36, 0x8F, 0xCC, 0x61, 
    0x0D, 0x35, 0x12, 0xDD, 0x4E, 0xC4, 0x64, 0x3F, 0x09, 0x70, 
    0x2A, 0xFB, 0xC5, 0x85, 0x3B, 0x1C, 0x50, 0x19, 0xD5, 0xE9, 
    0x47, 0x0B, 0xE2, 0xCA, 0xC6, 0xF7, 0xB2, 0xD6, 0xF8, 0x11, 
    0x54, 0x6E, 0x90, 0xC2, 0xEC, 0x96, 0x51, 0xD7, 0xE8, 0x31, 
    0x80, 0x7D, 0x18, 0x34, 0xB7, 0x02, 0xA0, 0x7A, 0xB3, 0xD0, 
    0x46, 0x66, 0x37, 0x1E, 0x7B, 0x42, 0x6C, 0x17, 0xD9, 0x33, 
    0x2B, 0x22, 0xCE, 0xA9, 0x7F, 0xB4, 0x07, 0x6A, 0x41, 0x40, 
    0x26, 0x2F, 0xA8, 0xCD, 0x71, 0xB8, 0x53, 0x13, 0x5E, 0xF6, 
    0xE0, 0x52, 0x4F, 0x6F, 0xE4, 0x89, 0x3C, 0x9C, 0xA3, 0x8A, 
    0x4D, 0x28, 0x0E, 0xD3, 0xD2, 0x98, 0xEE, 0x2C, 0x2E, 0xED, 
    0x27, 0x20, 0x01, 0x23, 0x55, 0xD1]

    while v25:
        v1 = index
        index += 1
        v13 = opcode[v1]
        v2 = v13
        if v13 == 0:
            v14 = opcode[index]
            v3 = index + 1
            index += 2
            v4 = opcode[v3]
            v2 = v14
            regs[v14] = v4
        elif v13 == 1:
            v15 = opcode[index]
            v5 = index + 1
            index += 2
            v23 = opcode[v5]
            v2 = v15
            regs[v15] ^= regs[v23]
        elif v13 == 2:
            v16 = opcode[index]
            v6 = index + 1
            index += 2
            v20 = opcode[v6]
            v2 = v16
            regs[v16] = ((regs[v16] >> (8 - v20)) | (regs[v16] << v20)) & 0xFF
        elif v13 == 3:
            v7 = index
            index += 1
            v2 = opcode[v7]
            regs[v2] = sbox[regs[v2]]
        elif v13 == 4:
            v17 = opcode[index]
            v8 = index + 1
            index += 2
            v2 = opcode[v8]
            memory[v2] = regs[v17]
        elif v13 == 5:
            v18 = opcode[index]
            v9 = index + 1
            index += 2
            v22 = opcode[v9]
            v2 = v18
            regs[v18] = memory[v22]
        elif v13 == 6:
            v10 = index
            index += 1
            v2 = regs[opcode[v10]]
            print(chr(v2), end='')
        elif v13 == 7:
            v25 = False
        elif v13 == 8:
            v19 = opcode[index]
            v11 = index + 1
            index += 2
            v21 = opcode[v11]
            v2 = v19
            regs[v19] = ((regs[v19] << (8 - v21)) | (regs[v19] >> v21)) & 0xFF
        else:
            print("Invalid instruction")
            v25 = False
    return memory[:len(flag)]
flag=[0]*len(cipher)
for i in range(len(cipher)):
    for char in range(1,0xff):
        flag[i] = char
        mem = runvm(flag)
        if mem[i] == cipher[i]:
            flag[i]=char
            break
# print(flag)
idx = flag[::-1]
for i in range(len(idx)-1,0,-1):
    idx[i] = idx[i-1]^idx[i]
print(bytearray(idx))
# bytearray(b'csawctf{w41t_1_54w_7h353_5ymb0l5_47_7h3_m3t_71m3_70_r34d_b00k_0f_7h3_d34d}')