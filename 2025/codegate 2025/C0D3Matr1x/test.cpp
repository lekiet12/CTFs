#include<iostream>
#include<stdio.h>
using namespace std;
#include "defs.h"
unsigned char key[]={0x43, 0x30, 0x44, 0x33, 0x47, 0x41, 0x54, 0x33, 0x00};
_DWORD cipher[576]={59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 19, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 1, 12, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 4, 12, 12, 54, 54, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 80, 12, 12, 12, 12, 61, 6, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 5, 65, 12, 61, 54, 61, 18, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 12, 61, 12, 54, 12, 31, 19, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 79, 59, 59, 59, 24, 12, 54, 12, 61, 54, 28, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 62, 84, 59, 59, 59, 59, 63, 61, 54, 12, 61, 61, 56, 55, 59, 59, 59, 59, 59, 59, 59, 59, 22, 84, 3, 84, 59, 59, 59, 59, 59, 59, 81, 12, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 67, 84, 84, 84, 84, 68, 59, 59, 59, 59, 59, 59, 59, 59, 52, 61, 61, 12, 59, 59, 59, 59, 41, 3, 3, 84, 3, 50, 60, 59, 59, 59, 59, 38, 70, 59, 59, 59, 59, 59, 25, 31, 59, 59, 55, 84, 84, 84, 3, 73, 1, 59, 59, 59, 59, 59, 59, 18, 73, 47, 44, 59, 59, 59, 59, 59, 59, 59, 59, 61, 66, 47, 3, 84, 84, 63, 59, 59, 59, 59, 59, 38, 84, 12, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 16, 50, 3, 3, 3, 84, 65, 64, 59, 59, 59, 6, 16, 59, 59, 59, 59, 59, 39, 49, 59, 59, 59, 59, 59, 59, 13, 50, 66, 3, 84, 84, 59, 59, 59, 59, 59, 59, 59, 59, 29, 39, 39, 75, 59, 59, 59, 59, 59, 59, 59, 59, 32, 50, 84, 73, 59, 59, 59, 59, 59, 59, 71, 36, 36, 36, 36, 75, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 76, 68, 59, 59, 59, 59, 83, 36, 36, 36, 36, 39, 74, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 34, 39, 36, 39, 36, 36, 15, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 77, 36, 36, 36, 36, 36, 34, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 79, 33, 29, 36, 36, 36, 36, 9, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 20, 36, 36, 36, 36, 36, 36, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 82, 36, 36, 36, 36, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 78, 36, 36, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 10};
_DWORD S1[576]={84, 18, 2, 2, 76, 65, 51, 81, 63, 12, 6, 24, 64, 67, 52, 71, 95, 34, 98, 33, 94, 26, 39, 77, 51, 86, 72, 44, 16, 4, 73, 2, 28, 40, 77, 28, 63, 43, 23, 25, 39, 66, 82, 70, 60, 0, 57, 65, 41, 9, 98, 39, 21, 23, 26, 29, 25, 72, 86, 18, 0, 4, 55, 74, 63, 0, 75, 25, 63, 55, 57, 36, 14, 89, 21, 184, 17, 61, 9, 33, 70, 37, 99, 63, 4, 23, 89, 95, 62, 97, 81, 30, 82, 54, 1, 27, 37, 12, 19, 58, 140, 97, 68, 46, 34, 34, 62, 98, 57, 86, 62, 30, 44, 59, 50, 13, 50, 79, 76, 67, 96, 50, 45, 21, 85, 174, 6, 90, 34, 17, 83, 85, 47, 27, 29, 19, 11, 38, 56, 33, 89, 10, 51, 82, 98, 15, 24, 83, 43, 44, 138, 1, 52, 73, 77, 3, 37, 9, 63, 24, 93, 60, 44, 36, 68, 17, 1, 24, 40, 56, 58, 77, 31, 69, 15, 16, 52, 12, 26, 46, 94, 1, 49, 89, 6, 51, 57, 7, 5, 74, 11, 53, 98, 65, 27, 21, 96, 49, 25, 39, 156, 77, 39, 79, 79, 33, 7, 56, 99, 50, 42, 88, 15, 47, 95, 21, 59, 17, 79, 94, 45, 5, 15, 14, 41, 66, 38, 60, 19, 79, 18, 43, 65, 17, 9, 6, 65, 56, 14, 7, 68, 43, 1, 62, 26, 83, 67, 44, 3, 12, 50, 0, 79, 15, 91, 96, 88, 71, 75, 16, 6, 10, 49, 71, 25, 16, 53, 10, 78, 6, 23, 7, 86, 76, 59, 88, 24, 24, 46, 75, 80, 8, 66, 29, 46, 89, 89, 52, 94, 22, 66, 4, 18, 71, 32, 33, 2, 32, 52, 5, 120, 68, 21, 64, 96, 42, 89, 39, 23, 98, 91, 96, 23, 75, 70, 8, 39, 85, 89, 66, 11, 96, 30, 88, 81, 150, 61, 25, 50, 48, 85, 86, 86, 80, 65, 28, 76, 6, 0, 76, 5, 42, 24, 53, 18, 81, 3, 25, 82, 52, 70, 8, 13, 86, 58, 54, 73, 43, 71, 70, 71, 21, 72, 83, 74, 24, 36, 67, 9, 40, 24, 38, 12, 54, 5, 112, 97, 77, 17, 39, 35, 57, 19, 88, 67, 29, 11, 52, 15, 25, 54, 37, 88, 67, 85, 88, 58, 64, 83, 51, 82, 10, 54, 89, 59, 9, 49, 89, 79, 86, 77, 22, 84, 89, 31, 27, 65, 96, 10, 81, 76, 71, 17, 78, 70, 122, 12, 61, 25, 14, 44, 41, 78, 23, 25, 63, 7, 11, 46, 40, 82, 4, 94, 94, 91, 7, 29, 12, 4, 0, 18, 34, 78, 73, 37, 52, 71, 6, 55, 45, 41, 2, 94, 52, 48, 22, 22, 73, 59, 1, 76, 16, 65, 67, 30, 34, 52, 92, 33, 2, 95, 24, 34, 11, 38, 5, 2, 74, 59, 60, 11, 28, 75, 50, 91, 21, 55, 34, 32, 92, 192, 92, 40, 75, 54, 16, 83, 92, 28, 81, 0, 79, 81, 91, 26, 33, 82, 34, 62, 12, 15, 30, 52, 13, 24, 30, 75, 48, 92, 41, 20, 90, 84, 46, 39, 14, 95, 51, 31, 28, 54, 64, 61, 64, 16, 91, 68, 10, 37, 66, 48, 4, 4, 16, 51, 91, 9, 46, 26, 59, 45, 88, 89, 8, 91, 34, 32, 0, 58, 67, 47, 47, 11, 84, 24, 138};
_DWORD S2[576]={1734, 45904, 64298, 43078, 43989, 64442, 3360, 45764, 3029, 42227, 16484, 48591, 34065, 10513, 50365, 26038, 28688, 8003, 8433, 29288, 28408, 5412, 63144, 930, 14283, 50191, 38688, 5074, 938, 18033, 49660, 8519, 63983, 47274, 33263, 8058, 57002, 35263, 49409, 10642, 58637, 32981, 42946, 1490, 2527, 44581, 52062, 42409, 38755, 47858, 34552, 39932, 17461, 28851, 43921, 17652, 17557, 57921, 17353, 52226, 42872, 20529, 39316, 56289, 59084, 63749, 32468, 28986, 7815, 42529, 58309, 11727, 38338, 63841, 42979, 64215, 8772, 57881, 32764, 19661, 1458, 13716, 63197, 24631, 11407, 1459, 15797, 21345, 36901, 56213, 46025, 25680, 44654, 63311, 46945, 63952, 169, 61708, 60605, 50840, 3106, 32440, 60069, 43896, 17279, 48976, 40352, 28897, 56296, 39744, 47525, 52212, 58514, 46582, 37279, 19251, 40687, 24218, 65472, 2743, 62399, 33411, 16863, 30579, 33204, 47623, 4054, 36819, 23823, 13233, 62896, 65467, 18357, 59895, 55171, 43494, 38593, 6166, 49930, 41933, 30852, 45548, 3169, 3959, 45386, 35583, 51065, 25197, 55129, 27777, 52317, 48410, 38389, 23905, 40094, 25235, 10513, 38744, 46800, 23508, 15256, 56447, 62076, 38934, 56905, 34165, 54599, 28214, 34357, 16021, 55494, 9415, 27480, 40175, 60044, 22572, 51680, 48445, 48206, 53260, 15457, 51703, 57875, 18579, 20934, 42799, 57844, 63335, 6776, 36175, 16955, 55861, 60691, 8843, 52521, 40756, 39293, 23838, 49546, 24921, 27014, 15416, 41078, 64552, 28612, 34641, 38624, 64253, 21190, 18694, 4467, 1116, 56688, 17907, 20548, 37550, 17034, 10712, 50770, 26525, 8511, 48899, 61633, 3690, 48600, 17809, 46521, 9560, 43309, 51334, 49199, 35279, 21397, 50552, 8312, 19167, 50943, 28353, 18965, 4873, 65005, 18060, 36843, 44778, 55411, 7047, 59227, 32949, 9069, 28823, 26711, 27459, 700, 37354, 45085, 30586, 46738, 14616, 53711, 38302, 1394, 22983, 54522, 55723, 36943, 23847, 14700, 19330, 34290, 41712, 51338, 35045, 62690, 27016, 25750, 16437, 15630, 5596, 46813, 52196, 11666, 16783, 39636, 44764, 64070, 9703, 8872, 44773, 6040, 57277, 52627, 1422, 10204, 60159, 43866, 14251, 46991, 24066, 36467, 15084, 63500, 28954, 37196, 56674, 58067, 28158, 13719, 9669, 44312, 58463, 14344, 60246, 13290, 27929, 64460, 41864, 45309, 49777, 60816, 16533, 17423, 9773, 46354, 25146, 25616, 25253, 27029, 40960, 47865, 58437, 9317, 42590, 46595, 49673, 45401, 27698, 285, 15406, 45629, 46201, 40271, 61231, 33598, 65039, 11955, 35707, 25051, 7622, 25908, 14321, 37007, 3453, 53850, 50832, 2857, 12832, 2431, 12826, 51908, 1963, 29614, 56142, 19045, 38560, 25840, 24389, 7799, 11747, 56588, 42184, 13279, 64207, 10673, 1995, 9387, 10777, 17394, 12947, 51538, 33774, 3585, 16972, 11468, 8651, 28703, 18983, 20016, 19164, 2118, 55909, 57841, 54991, 5569, 60792, 53234, 7273, 61189, 56659, 11193, 5121, 3837, 28721, 61401, 22416, 5304, 42438, 64115, 8076, 24945, 42091, 50468, 35448, 11715, 25020, 1186, 56772, 29636, 35920, 53180, 13192, 29680, 59724, 34254, 8380, 36616, 26599, 58824, 27069, 18111, 27108, 61476, 62907, 43921, 3122, 22504, 52272, 50826, 42483, 61375, 24436, 3711, 14719, 61483, 11857, 4094, 13006, 63082, 42653, 37809, 58687, 63572, 24760, 42914, 61271, 27270, 50122, 37860, 45809, 1424, 36037, 61111, 26173, 25361, 56086, 37524, 33433, 189, 64673, 54591, 32352, 65348, 42028, 43249, 20853, 59808, 60180, 56164, 45170, 12665, 22994, 47103, 12000, 64768, 17149, 6139, 43121, 54222, 29625, 21292, 9289, 17832, 58522, 50123, 17559, 22593, 4567, 32008, 18115, 53086, 28764, 49188, 53372, 32534, 40343, 16017, 9375, 59815, 5349, 35893, 31341, 62441, 47350, 56541, 17565, 42276, 3896, 17680, 22685, 30881, 19130, 41957, 2515, 62283, 22277, 55885, 13104, 6473, 10569, 52844, 21145, 832, 51093, 39106, 54801, 25106, 45123, 12883, 64753, 22844, 13462, 2261, 62871, 29750, 57670, 52890, 65011, 46460, 22954, 36660, 27214, 8953, 56085, 714, 7648, 7771, 14863, 43847, 29312, 5821, 33387, 65519, 27044, 3682, 26446, 52675, 9089, 4487, 4812, 54888, 19919, 35244, 30134, 38349, 6421, 54558, 30898};
_DWORD S3[576]={4294967181, 0, 15, 1, 4294967275, 49, 4294967272, 5, 42, 4294967294, 4294967280, 4294967287, 40, 46, 56, 4294967262, 16, 4294967271, 39, 26, 23, 42, 4294967240, 0, 4294967265, 4294967281, 7, 4294967282, 11, 22, 13, 4294967263, 4294967287, 40, 31, 54, 4294967277, 4294967270, 4294967276, 12, 30, 14, 44, 4294967282, 49, 4294967292, 4294967292, 25, 53, 8, 4294967251, 20, 4294967291, 58, 16, 4294967281, 18, 59, 45, 23, 50, 51, 4294967263, 11, 46, 4294967262, 4294967281, 4294967287, 4294967250, 4294967246, 3, 4294967261, 9, 39, 4294967283, 4294967169, 19, 4294967256, 30, 21, 4294967256, 32, 37, 4294967276, 30, 30, 29, 25, 3, 18, 4294967284, 4294967238, 4294967252, 4294967220, 39, 4294967241, 4294967278, 4294967262, 4, 4294967280, 4294967277, 4294967287, 4294967292, 4294967261, 31, 4294967264, 0, 59, 5, 23, 29, 4294967256, 4294967266, 4294967295, 54, 4294967283, 4294967295, 4294967265, 36, 56, 17, 16, 4294967256, 18, 9, 4294967167, 36, 4294967263, 0, 4294967273, 23, 43, 3, 30, 10, 4294967292, 4294967256, 3, 4294967254, 4294967256, 10, 4294967274, 28, 4294967260, 24, 4294967290, 4294967276, 4294967294, 4294967271, 17, 4294967243, 4294967290, 4294967278, 49, 4294967280, 14, 4294967295, 27, 4294967284, 4294967224, 4294967286, 4294967258, 4294967292, 0, 53, 26, 23, 4294967268, 56, 26, 2, 57, 4294967258, 4294967278, 14, 4294967173, 48, 38, 4294967267, 4294967284, 4294967284, 18, 4294967258, 31, 59, 4294967269, 4294967252, 4294967240, 27, 4294967263, 4294967267, 19, 54, 22, 4294967282, 4294967267, 16, 4294967265, 46, 30, 4294967262, 72, 4294967202, 24, 41, 52, 4294967287, 4294967283, 4294967263, 4294967287, 56, 4294967291, 25, 54, 3, 43, 4294967283, 49, 56, 36, 43, 4294967269, 53, 4294967281, 7, 4294967202, 83, 4294967268, 4294967268, 31, 23, 4294967267, 44, 4294967256, 4294967265, 3, 0, 58, 60, 4294967254, 4294967256, 4294967269, 55, 46, 4294967260, 4294967274, 4294967251, 25, 4294967287, 22, 24, 4294967294, 12, 4294967266, 35, 32, 11, 4294967294, 29, 4294967264, 4294967263, 42, 4294967243, 22, 4294967262, 4294967266, 33, 4294967294, 2, 23, 4294967268, 58, 4294967201, 4294967289, 20, 23, 4294967280, 57, 4294967284, 4294967221, 4294967293, 19, 4294967270, 58, 49, 4294967277, 45, 33, 57, 21, 47, 16, 18, 15, 4294967274, 6, 59, 4294967284, 4294967271, 45, 39, 1, 27, 4294967294, 41, 4294967223, 25, 6, 8, 4294967272, 9, 11, 4294967267, 40, 4294967270, 26, 4294967219, 4294967251, 4294967208, 4294967266, 4294967201, 34, 4294967268, 1, 4294967256, 4294967183, 2, 6, 4294967290, 4294967292, 4294967262, 27, 4294967259, 4294967284, 4294967285, 35, 27, 2, 9, 13, 4294967265, 4294967290, 12, 4294967282, 4294967280, 4294967286, 34, 4294967287, 25, 4294967277, 4294967181, 4294967287, 4294967274, 4294967295, 9, 41, 4294967250, 4294967243, 4294967236, 28, 4294967260, 4294967274, 18, 34, 25, 48, 50, 27, 4294967245, 4294967272, 45, 71, 4294967258, 4294967281, 32, 51, 4294967272, 15, 45, 5, 4294967241, 23, 8, 38, 43, 19, 22, 4294967257, 4294967259, 4294967282, 4294967292, 4294967262, 8, 4294967277, 4294967283, 43, 4294967260, 4294967257, 28, 24, 63, 4294967242, 8, 4294967273, 4294967269, 4294967246, 34, 36, 38, 4294967291, 40, 4294967293, 4294967288, 4294967290, 35, 4294967279, 26, 35, 30, 4294967277, 4294967259, 8, 0, 4294967267, 4294967239, 4294967235, 4294967242, 0, 4294967280, 59, 4294967283, 4294967257, 4294967282, 4294967270, 55, 0, 58, 24, 39, 21, 44, 4294967274, 22, 4294967258, 4294967279, 3, 57, 4294967276, 4294967286, 2, 14, 4294967286, 21, 4294967256, 8, 21, 4294967266, 4294967278, 4294967261, 4294967275, 4294967293, 4294967293, 4294967288, 45, 4294967268, 8, 20, 4294967258, 4294967267, 4294967256, 4294967256, 69, 20, 4294967277, 28, 22, 15, 13, 4294967262, 4294967270, 4294967267, 4294967277, 4294967264, 4294967282, 38, 4294967259, 27, 54, 4294967266, 4294967258, 56, 39, 4294967281, 43, 4294967261, 4294967293, 31, 4294967243, 4294967287, 4294967249, 4294967238, 3, 12, 25, 45, 52, 4294967258, 4294967286, 14, 4294967279, 4294967267, 12, 41, 23, 4294967257, 16, 4294967266, 5, 3, 27, 5, 21, 16, 41, 33, 4294967168, 17, 23, 34, 51, 23, 22, 20, 4294967294, 39, 55, 14, 40, 48, 56, 57, 4, 37, 4294967273, 27, 2, 5, 35, 27, 4294967280, 4294967230, 4294967257, 15, 40, 4294967272, 4294967267, 4294967294, 4294967291, 54, 4294967271, 20, 59, 4294967288, 8, 4294967285, 4294967292, 15, 58, 42, 4294967258, 4294967285, 31, 50, 6, 37, 4294967240};
_DWORD S4[576]={4294967149, 0, 15, 1, 4294967275, 49, 4294967272, 5, 42, 4294967294, 4294967280, 4294967287, 40, 46, 56, 4294967262, 16, 4294967271, 39, 26, 23, 42, 4294967280, 4294967294, 4294967267, 4294967234, 17, 4294967282, 11, 22, 13, 4294967263, 4294967287, 40, 31, 54, 4294967277, 4294967270, 4294967276, 12, 30, 14, 44, 4294967282, 49, 54, 43, 23, 48, 4294967257, 4294967253, 22, 4294967243, 58, 16, 4294967281, 18, 59, 45, 23, 50, 51, 4294967263, 11, 46, 4294967262, 4294967281, 46, 1, 4294967293, 8, 4294967266, 4294967247, 41, 4294967236, 4294967171, 4294967268, 4294967228, 4294967275, 21, 4294967256, 32, 37, 4294967276, 30, 30, 29, 25, 3, 4294967293, 35, 4294967285, 3, 4294967267, 37, 4294967294, 4294967278, 4294967229, 6, 4294967233, 4294967230, 4294967289, 4294967245, 4294967233, 4294967285, 4294967264, 0, 59, 5, 23, 29, 14, 4294967260, 46, 52, 4294967288, 4294967293, 10, 36, 56, 17, 16, 4294967256, 11, 4294967258, 4294967162, 31, 4294967265, 4294967291, 4294967270, 23, 43, 3, 30, 57, 4294967290, 7, 8, 5, 4294967284, 50, 4294967274, 28, 4294967260, 24, 4294967290, 4294967231, 4294967247, 4294967224, 12, 4294967245, 4294967285, 4294967277, 49, 4, 4294967254, 4294967295, 27, 4294967284, 4294967259, 37, 4294967263, 43, 4294967294, 58, 57, 23, 4294967268, 8, 28, 4294967251, 10, 4294967253, 4294967284, 4294967273, 4294967173, 48, 1, 4294967270, 4294967212, 4294967237, 17, 4294967258, 31, 55, 4294967267, 4294967257, 4294967287, 25, 4294967261, 4294967270, 23, 56, 4294967271, 4294967235, 4294967220, 13, 4294967265, 46, 6, 4294967252, 49, 4294967211, 4294967290, 4294967290, 5, 4294967289, 4294967264, 4294967263, 4294967287, 34, 42, 23, 52, 1, 41, 4294967278, 51, 51, 4294967280, 43, 4294967244, 4294967294, 4294967262, 4294967231, 4294967130, 53, 4294967261, 4294967274, 33, 4294967272, 4294967220, 4294967293, 4294967277, 4294967265, 3, 7, 56, 58, 5, 4294967251, 4294967253, 55, 4294967288, 4294967280, 36, 4294967260, 4294967249, 0, 33, 23, 4294967294, 12, 4294967219, 4294967284, 55, 2, 0, 1, 4294967257, 4294967263, 42, 4294967277, 50, 4294967262, 4294967266, 37, 4294967269, 4294967273, 4294967294, 28, 44, 4294967259, 4294967289, 20, 23, 4294967280, 57, 4294967284, 4294967262, 4294967279, 31, 4294967285, 58, 49, 4294967277, 45, 33, 57, 21, 27, 4294967290, 4294967287, 4, 11, 4294967257, 11, 4294967257, 4294967248, 22, 16, 4294967274, 4, 4294967295, 4294967289, 4294967247, 2, 4294967282, 4294967281, 4294967272, 9, 11, 4294967267, 40, 4294967270, 26, 4294967239, 4294967237, 4294967241, 3, 4294967234, 4294967282, 4294967239, 4294967269, 4294967233, 4294967160, 4294967275, 36, 17, 4294967269, 4294967232, 27, 4294967259, 4294967284, 9, 45, 27, 2, 9, 13, 4294967265, 14, 56, 4294967262, 4294967260, 23, 4294967282, 4294967239, 5, 4294967254, 4294967168, 4294967281, 4294967261, 4294967295, 9, 41, 4294967280, 4294967263, 4294967256, 12, 4294967260, 4294967274, 18, 34, 25, 48, 50, 27, 4294967272, 4294967294, 4294967293, 34, 4294967235, 4294967259, 32, 51, 4294967272, 15, 33, 28, 4294967264, 46, 31, 22, 43, 19, 22, 4294967257, 4294967259, 4294967282, 4294967292, 4294967262, 8, 4294967289, 4294967243, 11, 4294967237, 4294967212, 28, 24, 39, 4294967265, 31, 0, 4294967292, 4294967266, 19, 36, 36, 4294967268, 17, 4294967270, 4294967265, 4294967267, 12, 4294967250, 26, 47, 7, 4294967266, 4294967259, 8, 25, 4294967287, 4294967262, 4294967255, 4294967265, 23, 28, 59, 4294967283, 4294967257, 4294967280, 4294967247, 32, 4294967273, 35, 1, 16, 4294967288, 44, 4294967266, 22, 4294967258, 4294967279, 3, 39, 3, 13, 25, 37, 13, 46, 4294967256, 8, 21, 4294967266, 4294967278, 4294967241, 4294967252, 4294967270, 4294967270, 4294967265, 31, 4294967268, 8, 20, 4294967258, 4294967267, 4294967256, 4294967256, 49, 46, 11, 51, 45, 38, 36, 16, 4294967270, 4294967244, 4294967254, 4294967241, 4294967259, 15, 4294967229, 27, 54, 4294967266, 4294967258, 56, 39, 4294967281, 43, 4294967261, 4294967293, 31, 4294967282, 14, 4294967272, 4294967261, 26, 35, 48, 22, 29, 4294967238, 4294967266, 4294967267, 4294967279, 4294967267, 12, 41, 23, 4294967257, 16, 4294967266, 5, 3, 27, 5, 21, 16, 18, 56, 4294967191, 40, 46, 11, 28, 45, 22, 20, 4294967294, 39, 55, 14, 40, 48, 56, 57, 4, 37, 4294967273, 27, 2, 5, 35, 27, 4294967261, 4294967253, 4294967280, 4294967277, 40, 4294967272, 4294967267, 4294967294, 4294967291, 54, 4294967271, 20, 59, 4294967288, 8, 4294967285, 4294967292, 15, 58, 42, 4294967258, 4294967285, 31, 50, 6, 37, 4294967289};

void  f2(_DWORD *a1)
{
  int i; // [rsp+Ch] [rbp-Ch]
  int j; // [rsp+10h] [rbp-8h]
  int v3; // [rsp+14h] [rbp-4h]

  for ( i = 0; i <= 11; ++i )
  {
    for ( j = i; j < 23 - i; ++j )
    {
      v3 = a1[24 * j + i];
      a1[24 * j + i] = a1[24 * (23 - i) + j];
      a1[24 * (23 - i) + j] = a1[24 * (23 - j) + 23 - i];
      a1[24 * (23 - j) + 23 - i] = a1[24 * i + 23 - j];
      a1[24 * i + 23 - j] = v3;
    }
  }
}
void  mul_matrix(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v3; // [rsp+18h] [rbp-10h]
  int i; // [rsp+1Ch] [rbp-Ch]
  int j; // [rsp+20h] [rbp-8h]
  int k; // [rsp+24h] [rbp-4h]

  for ( i = 0; i <= 23; ++i )
  {
    for ( j = 0; j <= 23; ++j )
    {
      v3 = 0;
      for ( k = 0; k <= 23; ++k )
        v3 += a2[24 * k + j] * a1[24 * i + k];
      a3[24 * i + j] = v3 % 0xFFFF;
    }
  }
}
void  f4(_DWORD *a1)
{
  int i; // [rsp+Ch] [rbp-Ch]
  int j; // [rsp+10h] [rbp-8h]
  int v3; // [rsp+14h] [rbp-4h]

  for ( i = 0; i <= 11; ++i )
  {
    for ( j = i; j < 23 - i; ++j )
    {
      v3 = a1[24 * j + i];
      a1[24 * j + i] = a1[24 * i + 23 - j];
      a1[24 * i + 23 - j] = a1[24 * (23 - j) + 23 - i];
      a1[24 * (23 - j) + 23 - i] = a1[24 * (23 - i) + j];
      a1[24 * (23 - i) + j] = v3;
    }
  }
}
void  f5(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int i; // [rsp+20h] [rbp-8h]
  int j; // [rsp+24h] [rbp-4h]

  for ( i = 0; i <= 23; ++i )
  {
    for ( j = 0; j <= 23; ++j )
      a3[24 * i + j] = (a1[24 * i + j] + a2[24 * i + j]) % 0xFFFFu;
  }
}
void  add_matrix(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int i; // [rsp+20h] [rbp-8h]
  int j; // [rsp+24h] [rbp-4h]

  for ( i = 0; i <= 23; ++i )
  {
    for ( j = 0; j <= 23; ++j )
      a3[24 * i + j] = (a1[24 * i + j] + a2[24 * i + j]) % 0xFFFF;
  }
}
void print_matrix(_DWORD *matrix, int n, int m){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            printf("%d, ",matrix[n*i+j]);
        }
        // printf("\n");
    }
}
void f1(_DWORD *a1, _DWORD *a2)
{
  int i; // [rsp+14h] [rbp-Ch]
  int j; // [rsp+18h] [rbp-8h]

  for ( i = 0; i <= 23; ++i )
  {
    for ( j = 0; j <= 23; ++j )
      a2[24 * i + j] = a1[26 * i + 53 + j]
                     + a1[26 * i + 52 + j]
                     + a1[26 * i + 28 + j]
                     + a1[26 * i + 27 + j]
                     + a1[26 * i + 26 + j]
                     + a1[26 * i + 2 + j]
                     + a1[26 * i + 1 + j]
                     + a1[26 * i + j]
                     + a1[26 * i + 54 + j];
  }
}
int main(int a1, char **a2, char **a3)
{
  __int64 v3; // rcx
  __int64 v4; // rax
  int v5; // eax
  int v7; // [rsp+0h] [rbp-4BD8h]
  int i; // [rsp+4h] [rbp-4BD4h]
  int j; // [rsp+8h] [rbp-4BD0h]
  int k; // [rsp+Ch] [rbp-4BCCh]
  int m; // [rsp+10h] [rbp-4BC8h]
  int n; // [rsp+14h] [rbp-4BC4h]
  int ii; // [rsp+18h] [rbp-4BC0h]
  int jj; // [rsp+1Ch] [rbp-4BBCh]
  int kk; // [rsp+20h] [rbp-4BB8h]
  int mm; // [rsp+24h] [rbp-4BB4h]
  int nn; // [rsp+28h] [rbp-4BB0h]
  int i1; // [rsp+2Ch] [rbp-4BACh]
  _DWORD v19[576]; // [rsp+38h] [rbp-4BA0h] BYREF
  _DWORD v20[576]; // [rsp+938h] [rbp-42A0h] BYREF
  _DWORD v21[576]; // [rsp+1238h] [rbp-39A0h] BYREF
  _DWORD v22[576]; // [rsp+1B38h] [rbp-30A0h] BYREF
  _DWORD v23[576]; // [rsp+2438h] [rbp-27A0h] BYREF
  _DWORD v24[576]; // [rsp+2D38h] [rbp-1EA0h] BYREF
  _DWORD v25[576]; // [rsp+3638h] [rbp-15A0h] BYREF
  _DWORD matrix_inp[676]; // [rsp+3mul_matrix8h] [rbp-CA0h] BYREF
  _BYTE v27[32]; // [rsp+49C8h] [rbp-210h] BYREF
  uint8_t inp[488]; // [rsp+49E8h] [rbp-1F0h] BYREF
  unsigned __int64 v29; // [rsp+4BD0h] [rbp-8h]

  memset(matrix_inp, 0, sizeof(matrix_inp));
  memset(v19, 0, sizeof(v19));
  memset(v20, 0, sizeof(v20));
  memset(v21, 0, sizeof(v21));
  memset(v22, 0, sizeof(v22));
  memset(v23, 0, sizeof(v23));
  memset(v24, 0, sizeof(v24));
  memset(v25, 0, sizeof(v25));
  memset(inp, 0, 485);
  v7 = 0;
  for ( i = 0; i <= 11; ++i )
  {
    if ( (i & 1) != 0 )
    {
      v19[24 * (23 - i) + i] = 1;
      v3 = 23 - i;
      v4 = 24LL * i;
    }
    else
    {
      v19[25 * i] = 1;
      v3 = 23 - i;
      v4 = 24 * v3;
    }
    v19[v3 + v4] = 1;
  }
//   scanf("%484[^\n]", inp);
  for ( j = 2; j <= 23; ++j )
  {
    for ( k = 2; k <= 23; ++k )
    {
      v5 = v7++;
    //   matrix_inp[26 * j + k] = (char)inp[v5];
        matrix_inp[26 * j + k] = 0x31;
    }
  }
  for ( m = 1; m <= 24; ++m )
  {
    for ( n = 1; n <= 24; ++n )
    {
      if ( !matrix_inp[26 * m + n] )
        matrix_inp[26 * m + n] = key[(n - 1 + m - 1) % 8];
    }
  }
  f1(matrix_inp, v20);
  print_matrix(matrix_inp,26,26);
  // f2(v20);
  // mul_matrix(v20, v19, v21);
  // mul_matrix(v19, v21, v20);
  // f4(v20);
  // f5(v20, S1, v22);
  // mul_matrix(v22, S2, v23);
  // add_matrix(v23, S3, v24);
  // add_matrix(v23, S4, v25);
  
  // for ( ii = 0; ii <= 23; ++ii )
  // {
  //   for ( jj = 0; jj <= 23; ++jj )
  //   {
  //     if ( v24[24 * ii + jj] != cipher[24 * ii + jj] )
  //     {
  //       puts("Wrong");
  //       return 0LL;
  //     }
  //   }
  // }
}