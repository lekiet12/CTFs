from z3 import *

x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 48, 68, 51, 71, 65, 84, 51, 67, 48, 68, 51, 71, 65, 84, 51, 67, 48, 68, 51, 71, 65, 84, 51, 0, 0, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 0, 0, 68, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 48, 0, 0, 51, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 68, 0, 0, 71, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51, 0, 0, 65, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 71, 0, 0, 84, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 65, 0, 0, 51, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 84, 0, 0, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51, 0, 0, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 0, 0, 68, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 48, 0, 0, 51, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 68, 0, 0, 71, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51, 0, 0, 65, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 71, 0, 0, 84, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 65, 0, 0, 51, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 84, 0, 0, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51, 0, 0, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 0, 0, 68, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 48, 0, 0, 51, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 68, 0, 0, 71, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51, 0, 0, 65, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 71, 0, 0, 84, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 65, 0, 0, 51, 67, 48, 68, 51, 71, 65, 84, 51, 67, 48, 68, 51, 71, 65, 84, 51, 67, 48, 68, 51, 71, 65, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
v20 = [230, 346, 350, 375, 395, 425, 420, 420, 351, 333, 363, 386, 431, 381, 432, 445, 425, 437, 410, 434, 365, 406, 404, 307, 408, 640, 677, 706, 720, 746, 743, 738, 683, 659, 681, 642, 609, 566, 665, 745, 728, 748, 732, 752, 610, 641, 584, 455, 395, 661, 714, 779, 809, 802, 741, 718, 759, 795, 846, 774, 751, 668, 802, 869, 894, 891, 818, 801, 662, 728, 662, 488, 383, 654, 717, 847, 918, 927, 857, 835, 916, 914, 902, 820, 827, 830, 883, 943, 951, 962, 885, 867, 730, 721, 587, 399, 342, 598, 671, 825, 833, 835, 773, 834, 921, 912, 906, 877, 986, 906, 918, 895, 978, 965, 873, 781, 668, 616, 576, 370, 372, 582, 615, 694, 700, 706, 758, 819, 869, 780, 794, 755, 824, 772, 833, 821, 900, 888, 948, 882, 769, 570, 505, 299, 417, 689, 673, 704, 635, 697, 659, 696, 746, 819, 880, 855, 830, 765, 839, 750, 833, 808, 965, 829, 773, 624, 661, 397, 446, 724, 699, 717, 725, 741, 611, 574, 664, 769, 827, 808, 740, 741, 804, 798, 806, 751, 927, 877, 851, 738, 672, 426, 472, 794, 793, 832, 830, 909, 745, 737, 810, 917, 949, 877, 777, 756, 835, 879, 879, 833, 944, 800, 760, 725, 748, 510, 503, 819, 801, 807, 821, 910, 850, 863, 918, 851, 859, 787, 772, 677, 768, 895, 974, 921, 939, 783, 745, 724, 711, 474, 504, 817, 765, 754, 688, 899, 855, 864, 842, 756, 846, 790, 847, 769, 803, 794, 856, 909, 994, 760, 746, 732, 819, 498, 518, 763, 772, 760, 777, 913, 863, 775, 750, 666, 749, 771, 895, 887, 757, 713, 728, 859, 919, 819, 744, 738, 741, 483, 436, 670, 751, 836, 866, 854, 773, 670, 723, 727, 758, 791, 785, 842, 656, 666, 599, 765, 826, 876, 814, 827, 785, 525, 458, 699, 806, 820, 927, 851, 836, 719, 783, 856, 822, 836, 777, 745, 620, 709, 733, 852, 821, 948, 874, 912, 783, 534, 442, 762, 883, 820, 829, 760, 828, 808, 863, 856, 828, 848, 872, 706, 583, 659, 789, 899, 876, 948, 889, 908, 811, 556, 509, 847, 897, 758, 730, 797, 879, 882, 885, 883, 844, 767, 834, 675, 667, 699, 907, 992, 910, 918, 778, 833, 702, 520, 473, 818, 899, 843, 797, 869, 946, 890, 893, 827, 776, 697, 757, 763, 769, 715, 835, 897, 842, 839, 649, 672, 559, 438, 500, 785, 853, 873, 839, 908, 891, 805, 801, 826, 769, 679, 571, 722, 762, 771, 842, 884, 846, 844, 721, 677, 515, 330, 489, 706, 872, 815, 852, 845, 908, 817, 804, 824, 826, 821, 662, 834, 789, 761, 760, 797, 904, 883, 846, 758, 626, 363, 508, 707, 777, 658, 718, 773, 897, 887, 885, 895, 896, 891, 747, 834, 710, 699, 704, 751, 908, 885, 924, 769, 617, 347, 492, 745, 755, 639, 696, 736, 878, 887, 898, 884, 904, 965, 856, 856, 797, 771, 757, 753, 909, 894, 925, 856, 736, 459, 469, 706, 658, 677, 767, 759, 804, 811, 885, 803, 810, 878, 917, 905, 778, 762, 739, 808, 891, 895, 928, 790, 667, 386, 415, 600, 608, 663, 766, 687, 709, 688, 759, 646, 671, 731, 785, 772, 743, 766, 750, 783, 816, 810, 847, 790, 753, 452, 248, 328, 350, 399, 507, 447, 466, 443, 514, 413, 419, 413, 515, 509, 463, 436, 435, 466, 486, 474, 512, 448, 445, 260]
index = []
for i in range(len(x)):
    if x[i] == 49:
        index.append(i)
s = Solver()

matrix_inp = [BitVec(f'x_{i}', 16) for i in range(484)]

for i in range(len(matrix_inp)):
    s.add(matrix_inp[i] >= 0)
    s.add(matrix_inp[i] <= 255)

tran_matrix = [BitVec(f'tran_{i}', 16) for i in range(676)]

n = 0
for i in range(676):
    if i in index:
        s.add(tran_matrix[i] == matrix_inp[n])
        n += 1
    else:
        s.add(tran_matrix[i] == x[i])

temp = [0] * 576
for i in range(24):
    for j in range(24):
        temp[i * 24 + j] = (
            tran_matrix[26 * i + j]       # Current
            + tran_matrix[26 * i + 1 + j] # Right 1
            + tran_matrix[26 * i + 2 + j] # Right 2
            + tran_matrix[26 * i + 26 + j]     # Down 1
            + tran_matrix[26 * i + 27 + j]     # Down 1, Right 1
            + tran_matrix[26 * i + 28 + j]     # Down 1, Right 2
            + tran_matrix[26 * i + 52 + j]     # Down 2
            + tran_matrix[26 * i + 53 + j]     # Down 2, Right 1
            + tran_matrix[26 * i + 54 + j]     # Down 2, Right 2
        )

for i in range(576):
    s.add(temp[i] == v20[i])

if s.check() == sat:
    m = s.model()
    result = [m[tran_matrix[i]].as_long() for i in range(676)]
    for i in range(len(matrix_inp)):
        print(chr(m[matrix_inp[i]].as_long()), end="")
else:
    print("No solution found.")


# C0DEGATE 1s a gl0ba1 internationa1 hacking d3f3ns3 competition and 5ecurity conference. Held annually since 2008, C0D3GAT3 is known as the Olympics for hackers, wh3re hack3rs and security 3xperts from around the world gath3r t0 c0mpet3 for the title of the w0rld's best hack3r. In addition to fierce competition among tru3 white-hat hackers, a juni0r division is also he1d, s3rv1ng as a p1atform f0r discover1ng talented 1ndividuals 1n th3 fi3ld of cyb3rsecurity. You are good hacker.

# codegate2025{de955b80b49fcf6922e7313778fb72d3644721b19c467f95c671b527b14d97f2}