v30 = [0]*25
v31 = [0]*25
v32 = [0]*25
v33 = [0]*25
v34 = [0]*25
v35 = [0]*25
v36 = [0]*25
v37 = [0]*25
v38 = [0]*25
v39 = [0]*25
v40 = [0]*25
v41 = [0]*25
v42 = [0]*25
v43 = [0]*25
v44 = [0]*25
v45 = [0]*25
v46 = [0]*25
v47 = [0]*25
v48 = [0]*25
v49 = [0]*25
v50 = [0]*25
v51 = [0]*25
v52 = [0]*25
v53 = [0]*25
v54 = [0]*25

# code = open("./test.txt", "r").read().split("\n")

# lst = []
# for i in range(len(code)):
#     if "mem" in code[i] or "std" in code[i]:
#         continue
#     lst.append(code[i])
# with open("output.txt", "w") as f:
#     for i in lst:
#         f.write(i + "\n")



v30[0] = 0
v30[1] = 0
v30[2] = 0
v30[3] = 21
v30[4] = 0
v30[5] = 11
v30[6] = 0
v30[7] = 0
v30[8] = 3
v30[9] = 24
v30[10] = 9
v30[11] = 20
v30[12] = 23
v30[13] = 0
v30[14] = 7
v30[15] = 22
v30[16] = 0
v30[17] = 5
v30[18] = 18
v30[19] = 0
v30[20] = 15
v30[21] = 2
v30[22] = 16
v30[23] = 13
v30[24] = 0
v31[0] = 24
v31[1] = 4
v31[2] = 0
v31[3] = 20
v31[4] = 15
v31[5] = 0
v31[6] = 0
v31[7] = 5
v31[8] = 0
v31[9] = 16
v31[10] = 2
v31[11] = 25
v31[12] = 22
v31[13] = 0
v31[14] = 17
v31[15] = 6
v31[16] = 21
v31[17] = 0
v31[18] = 14
v31[19] = 0
v31[20] = 8
v31[21] = 10
v31[22] = 1
v31[23] = 19
v31[24] = 18
v32[0] = 0
v32[1] = 0
v32[2] = 10
v32[3] = 0
v32[4] = 5
v32[5] = 0
v32[6] = 21
v32[7] = 19
v32[8] = 22
v32[9] = 0
v32[10] = 3
v32[11] = 13
v32[12] = 1
v32[13] = 16
v32[14] = 0
v32[15] = 15
v32[16] = 4
v32[17] = 7
v32[18] = 23
v32[19] = 24
v32[20] = 12
v32[21] = 0
v32[22] = 14
v32[23] = 0
v32[24] = 0
v33[0] = 0
v33[1] = 0
v33[2] = 13
v33[3] = 6
v33[4] = 12
v33[5] = 14
v33[6] = 4
v33[7] = 1
v33[8] = 0
v33[9] = 0
v33[10] = 24
v33[11] = 18
v33[12] = 19
v33[13] = 5
v33[14] = 0
v33[15] = 0
v33[16] = 17
v33[17] = 0
v33[18] = 0
v33[19] = 0
v33[20] = 7
v33[21] = 22
v33[22] = 0
v33[23] = 9
v33[24] = 21
v34[0] = 0
v34[1] = 23
v34[2] = 19
v34[3] = 7
v34[4] = 0
v34[5] = 0
v34[6] = 6
v34[7] = 0
v34[8] = 0
v34[9] = 20
v34[10] = 15
v34[11] = 4
v34[12] = 0
v34[13] = 21
v34[14] = 0
v34[15] = 0
v34[16] = 0
v34[17] = 0
v34[18] = 16
v34[19] = 10
v34[20] = 24
v34[21] = 3
v34[22] = 0
v34[23] = 17
v34[24] = 5
v35[0] = 12
v35[1] = 15
v35[2] = 21
v35[3] = 0
v35[4] = 0
v35[5] = 0
v35[6] = 16
v35[7] = 6
v35[8] = 18
v35[9] = 5
v35[10] = 7
v35[11] = 0
v35[12] = 17
v35[13] = 3
v35[14] = 9
v35[15] = 14
v35[16] = 0
v35[17] = 4
v35[18] = 24
v35[19] = 22
v35[20] = 13
v35[21] = 0
v35[22] = 0
v35[23] = 0
v35[24] = 0
v36[0] = 14
v36[1] = 10
v36[2] = 11
v36[3] = 2
v36[4] = 24
v36[5] = 1
v36[6] = 25
v36[7] = 22
v36[8] = 20
v36[9] = 0
v36[10] = 0
v36[11] = 23
v36[12] = 6
v36[13] = 19
v36[14] = 0
v36[15] = 13
v36[16] = 5
v36[17] = 8
v36[18] = 12
v36[19] = 0
v36[20] = 17
v36[21] = 0
v36[22] = 7
v36[23] = 15
v36[24] = 9
v37[0] = 0
v37[1] = 0
v37[2] = 0
v37[3] = 0
v37[4] = 1
v37[5] = 24
v37[6] = 0
v37[7] = 3
v37[8] = 15
v37[9] = 10
v37[10] = 20
v37[11] = 8
v37[12] = 5
v37[13] = 0
v37[14] = 25
v37[15] = 9
v37[16] = 16
v37[17] = 19
v37[18] = 21
v37[19] = 0
v37[20] = 2
v37[21] = 6
v37[22] = 0
v37[23] = 12
v37[24] = 14
v38[0] = 0
v38[1] = 0
v38[2] = 5
v38[3] = 0
v38[4] = 3
v38[5] = 0
v38[6] = 23
v38[7] = 14
v38[8] = 8
v38[9] = 0
v38[10] = 0
v38[11] = 2
v38[12] = 15
v38[13] = 0
v38[14] = 12
v38[15] = 0
v38[16] = 7
v38[17] = 1
v38[18] = 17
v38[19] = 6
v38[20] = 22
v38[21] = 21
v38[22] = 4
v38[23] = 0
v38[24] = 19
v39[0] = 13
v39[1] = 0
v39[2] = 0
v39[3] = 4
v39[4] = 20
v39[5] = 0
v39[6] = 0
v39[7] = 0
v39[8] = 17
v39[9] = 0
v39[10] = 11
v39[11] = 16
v39[12] = 0
v39[13] = 0
v39[14] = 22
v39[15] = 0
v39[16] = 10
v39[17] = 18
v39[18] = 15
v39[19] = 23
v39[20] = 0
v39[21] = 25
v39[22] = 8
v39[23] = 1
v39[24] = 3
v40[0] = 20
v40[1] = 25
v40[2] = 7
v40[3] = 22
v40[4] = 0
v40[5] = 23
v40[6] = 0
v40[7] = 10
v40[8] = 1
v40[9] = 0
v40[10] = 0
v40[11] = 0
v40[12] = 0
v40[13] = 13
v40[14] = 4
v40[15] = 21
v40[16] = 0
v40[17] = 6
v40[18] = 19
v40[19] = 0
v40[20] = 3
v40[21] = 9
v40[22] = 15
v40[23] = 8
v40[24] = 0
v41[0] = 1
v41[1] = 24
v41[2] = 0
v41[3] = 0
v41[4] = 0
v41[5] = 4
v41[6] = 0
v41[7] = 20
v41[8] = 13
v41[9] = 0
v41[10] = 8
v41[11] = 0
v41[12] = 3
v41[13] = 0
v41[14] = 19
v41[15] = 16
v41[16] = 2
v41[17] = 12
v41[18] = 9
v41[19] = 5
v41[20] = 0
v41[21] = 14
v41[22] = 10
v41[23] = 25
v41[24] = 22
v42[7] = 9
v42[8] = 24
v42[9] = 0
v42[10] = 25
v42[11] = 6
v42[12] = 0
v42[13] = 2
v42[14] = 16
v42[15] = 4
v42[16] = 8
v42[17] = 10
v42[18] = 0
v42[19] = 17
v42[20] = 18
v42[21] = 7
v42[22] = 21
v42[23] = 0
v42[24] = 1
v43[0] = 0
v43[1] = 8
v43[2] = 0
v43[3] = 10
v43[4] = 14
v43[5] = 16
v43[6] = 3
v43[7] = 25
v43[8] = 6
v43[9] = 0
v43[10] = 0
v43[11] = 7
v43[12] = 18
v43[13] = 9
v43[14] = 11
v43[15] = 0
v43[16] = 13
v43[17] = 0
v43[18] = 20
v43[19] = 0
v43[20] = 19
v43[21] = 24
v43[22] = 5
v43[23] = 0
v43[24] = 17
v44[0] = 17
v44[1] = 3
v44[2] = 0
v44[3] = 15
v44[4] = 9
v44[5] = 5
v44[6] = 0
v44[7] = 0
v44[8] = 11
v44[9] = 0
v44[10] = 0
v44[11] = 21
v44[12] = 0
v44[13] = 0
v44[14] = 23
v44[15] = 7
v44[16] = 0
v44[17] = 22
v44[18] = 0
v44[19] = 0
v44[20] = 20
v44[21] = 13
v44[22] = 12
v44[23] = 4
v44[24] = 6
v45[0] = 15
v45[1] = 0
v45[2] = 20
v45[3] = 11
v45[4] = 21
v45[5] = 10
v45[6] = 0
v45[7] = 0
v45[8] = 5
v45[9] = 22
v45[10] = 16
v45[11] = 0
v45[12] = 0
v45[13] = 8
v45[14] = 3
v45[15] = 24
v45[16] = 0
v45[17] = 13
v45[18] = 2
v45[19] = 19
v46[0] = 0
v46[1] = 13
v46[2] = 8
v46[3] = 0
v46[4] = 19
v46[5] = 17
v46[11] = 12
v46[12] = 7
v46[13] = 24
v46[14] = 6
v46[15] = 0
v46[16] = 15
v46[17] = 23
v46[18] = 22
v46[19] = 4
v46[20] = 14
v46[21] = 5
v46[22] = 9
v46[23] = 0
v46[24] = 0
v47[0] = 9
v47[1] = 1
v47[2] = 23
v47[3] = 14
v47[4] = 4
v47[5] = 0
v47[6] = 24
v47[7] = 0
v47[8] = 7
v47[9] = 8
v47[10] = 19
v47[11] = 0
v47[12] = 2
v47[13] = 0
v47[14] = 13
v47[15] = 17
v47[16] = 3
v47[17] = 20
v47[18] = 5
v47[19] = 0
v47[20] = 0
v47[21] = 15
v47[22] = 0
v47[23] = 16
v47[24] = 10
v48[0] = 10
v48[1] = 0
v48[2] = 2
v48[3] = 12
v48[4] = 0
v48[5] = 13
v48[6] = 18
v48[7] = 15
v48[8] = 0
v48[9] = 0
v48[10] = 17
v48[11] = 5
v48[12] = 0
v48[13] = 20
v48[14] = 21
v48[15] = 8
v48[16] = 1
v48[17] = 16
v48[18] = 0
v48[19] = 7
v48[20] = 0
v48[21] = 19
v48[22] = 0
v48[23] = 11
v48[24] = 0
v49[0] = 7
v49[1] = 5
v49[2] = 17
v49[3] = 24
v49[4] = 16
v49[5] = 20
v49[6] = 2
v49[7] = 11
v49[8] = 19
v49[9] = 3
v49[10] = 23
v49[11] = 0
v49[12] = 4
v49[13] = 15
v49[14] = 1
v49[15] = 18
v49[16] = 14
v49[17] = 0
v49[18] = 10
v49[19] = 0
v49[20] = 0
v49[21] = 8
v49[22] = 13
v49[23] = 21
v49[24] = 12
v50[0] = 0
v50[1] = 20
v50[2] = 9
v50[3] = 0
v50[4] = 7
v50[5] = 15
v50[6] = 22
v50[7] = 17
v50[8] = 10
v50[9] = 0
v50[10] = 12
v50[11] = 19
v50[12] = 0
v50[13] = 0
v50[14] = 24
v50[15] = 25
v50[16] = 0
v50[17] = 14
v50[18] = 4
v50[19] = 8
v50[20] = 16
v50[21] = 18
v50[22] = 2
v50[23] = 0
v50[24] = 0
v51[0] = 19
v51[1] = 2
v51[2] = 24
v51[3] = 8
v51[4] = 0
v51[5] = 0
v51[6] = 20
v51[7] = 7
v51[8] = 4
v51[9] = 0
v51[10] = 0
v51[11] = 0
v51[12] = 9
v51[13] = 0
v51[14] = 15
v51[15] = 5
v51[16] = 0
v51[17] = 21
v51[18] = 11
v51[19] = 16
v51[20] = 1
v51[21] = 0
v51[22] = 0
v51[23] = 14
v51[24] = 25
v52[0] = 0
v52[1] = 0
v52[2] = 25
v52[3] = 1
v52[4] = 0
v52[5] = 8
v52[6] = 5
v52[7] = 23
v52[8] = 14
v52[9] = 6
v52[10] = 4
v52[11] = 17
v52[12] = 16
v52[13] = 0
v52[14] = 2
v52[15] = 0
v52[16] = 20
v52[17] = 0
v52[18] = 13
v52[19] = 9
v52[20] = 10
v52[21] = 12
v52[22] = 24
v52[23] = 7
v52[24] = 15
v53[0] = 0
v53[1] = 0
v53[2] = 14
v53[9] = 2
v53[10] = 6
v53[11] = 10
v53[12] = 13
v53[13] = 0
v53[14] = 5
v53[15] = 12
v53[16] = 0
v53[17] = 24
v53[18] = 0
v53[19] = 0
v53[20] = 9
v53[21] = 11
v53[22] = 0
v53[23] = 3
v53[24] = 8

v54[0] = 6
v54[1] = 0
v54[2] = 15
v54[3] = 0
v54[4] = 13
v54[5] = 0
v54[6] = 0
v54[7] = 24
v54[8] = 0
v54[9] = 9
v54[10] = 1
v54[11] = 0
v54[12] = 8
v54[13] = 25
v54[14] = 0
v54[15] = 10
v54[16] = 18
v54[17] = 17
v54[18] = 0
v54[19] = 2
v54[20] = 0
v54[21] = 4
v54[22] = 19
v54[23] = 0
v54[24] = 23

board = [v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54]

from typing import List
from bitarray import bitarray
board = [[0, 0, 0, 21, 0, 11, 0, 0, 3, 24, 9, 20, 23, 0, 7, 22, 0, 5, 18, 0, 15, 2, 16, 13, 0], [24, 4, 0, 20, 15, 0, 0, 5, 0, 16, 2, 25, 22, 0, 17, 6, 21, 0, 14, 0, 8, 10, 1, 19, 18], [0, 0, 10, 0, 5, 0, 21, 19, 22, 0, 3, 13, 1, 16, 0, 15, 4, 7, 23, 24, 12, 0, 14, 0, 0], [0, 0, 13, 6, 12, 14, 4, 1, 0, 0, 24, 18, 19, 5, 0, 0, 17, 0, 0, 0, 7, 22, 0, 9, 21], [0, 23, 19, 7, 0, 0, 6, 0, 0, 20, 15, 4, 0, 21, 0, 0, 0, 0, 16, 10, 24, 3, 0, 17, 5], [12, 15, 21, 0, 0, 0, 16, 6, 18, 5, 7, 0, 17, 3, 9, 14, 0, 4, 24, 22, 13, 0, 0, 0, 0], [14, 10, 11, 2, 24, 1, 25, 22, 20, 0, 0, 23, 6, 19, 0, 13, 5, 8, 12, 0, 17, 0, 7, 15, 9], [0, 0, 0, 0, 1, 24, 0, 3, 15, 10, 20, 8, 5, 0, 25, 9, 16, 19, 21, 0, 2, 6, 0, 12, 14], [0, 0, 5, 0, 3, 0, 23, 14, 8, 0, 0, 2, 15, 0, 12, 0, 7, 1, 17, 6, 22, 21, 4, 0, 19], [13, 0, 0, 4, 20, 0, 0, 0, 17, 0, 11, 16, 0, 0, 22, 0, 10, 18, 15, 23, 0, 25, 8, 1, 3], [20, 25, 7, 22, 0, 23, 0, 10, 1, 0, 0, 0, 0, 13, 4, 21, 0, 6, 19, 0, 3, 9, 15, 8, 0], [1, 24, 0, 0, 0, 4, 0, 20, 13, 0, 8, 0, 3, 0, 19, 16, 2, 12, 9, 5, 0, 14, 10, 25, 22], [0, 0, 0, 0, 0, 0, 0, 9, 24, 0, 25, 6, 0, 2, 16, 4, 8, 10, 0, 17, 18, 7, 21, 0, 1], [0, 8, 0, 10, 14, 16, 3, 25, 6, 0, 0, 7, 18, 9, 11, 0, 13, 0, 20, 0, 19, 24, 5, 0, 17], [17, 3, 0, 15, 9, 5, 0, 0, 11, 0, 0, 21, 0, 0, 23, 7, 0, 22, 0, 0, 20, 13, 12, 4, 6], [15, 0, 20, 11, 21, 10, 0, 0, 5, 22, 16, 0, 0, 8, 3, 24, 0, 13, 2, 19, 0, 0, 0, 0, 0], [0, 13, 8, 0, 19, 17, 0, 0, 0, 0, 0, 12, 7, 24, 6, 0, 15, 23, 22, 4, 14, 5, 9, 0, 0], [9, 1, 23, 14, 4, 0, 24, 0, 7, 8, 19, 0, 2, 0, 13, 17, 3, 20, 5, 0, 0, 15, 0, 16, 10], [10, 0, 2, 12, 0, 13, 18, 15, 0, 0, 17, 5, 0, 20, 21, 8, 1, 16, 0, 7, 0, 19, 0, 11, 0], [7, 5, 17, 24, 16, 20, 2, 11, 19, 3, 23, 0, 4, 15, 1, 18, 14, 0, 10, 0, 0, 8, 13, 21, 12], [0, 20, 9, 0, 7, 15, 22, 17, 10, 0, 12, 19, 0, 0, 24, 25, 0, 14, 4, 8, 16, 18, 2, 0, 0], [19, 2, 24, 8, 0, 0, 20, 7, 4, 0, 0, 0, 9, 0, 15, 5, 0, 21, 11, 16, 1, 0, 0, 14, 25], [0, 0, 25, 1, 0, 8, 5, 23, 14, 6, 4, 17, 16, 0, 2, 0, 20, 0, 13, 9, 10, 12, 24, 7, 15], [0, 0, 14, 0, 0, 0, 0, 0, 0, 2, 6, 10, 13, 0, 5, 12, 0, 24, 0, 0, 9, 11, 0, 3, 8], [6, 0, 15, 0, 13, 0, 0, 24, 0, 9, 1, 0, 8, 25, 0, 10, 18, 17, 0, 2, 0, 4, 19, 0, 23]]
def is_valid(board: List[List[int]]) -> bool:
    size = 25
    
    for i in range(size):
        row_check = bitarray(26)
        col_check = bitarray(26)
        row_check.setall(False)
        col_check.setall(False)
        
        for j in range(size):
            if board[i][j] > 0:
                if row_check[board[i][j]]:
                    return False
                row_check[board[i][j]] = True
            
            if board[j][i] > 0:
                if col_check[board[j][i]]:
                    return False
                col_check[board[j][i]] = True
    
    for k in range(0, size, 5):
        for m in range(0, size, 5):
            box_check = bitarray(26)
            box_check.setall(False)
            
            for n in range(5):
                for ii in range(5):
                    value = board[k + n][m + ii]
                    if value > 0:
                        if box_check[value]:
                            return False
                        box_check[value] = True
    
    return True

def find_empty_cell(board: List[List[int]]):
    for i in range(25):
        for j in range(25):
            if board[i][j] == 0:
                return i, j
    return None

def solve(board: List[List[int]]) -> List[List[int]]:
    empty_cell = find_empty_cell(board)
    if not empty_cell:
        return board 
    row, col = empty_cell
    
    for num in range(1, 26):
        board[row][col] = num
        if is_valid(board):
            result = solve(board)
            if result:
                return result
        board[row][col] = 0  
    return None  
temp = board
board_solve = [[25, 14, 1, 21, 17, 11, 10, 8, 3, 24, 9, 20, 23, 6, 7, 22, 19, 5, 18, 12, 15, 2, 16, 13, 4], [24, 4, 3, 20, 15, 7, 9, 5, 23, 16, 2, 25, 22, 12, 17, 6, 21, 11, 14, 13, 8, 10, 1, 19, 18], [2, 18, 10, 9, 5, 25, 21, 19, 22, 17, 3, 13, 1, 16, 8, 15, 4, 7, 23, 24, 12, 20, 14, 6, 11], [16, 11, 13, 6, 12, 14, 4, 1, 2, 15, 24, 18, 19, 5, 10, 3, 17, 25, 8, 20, 7, 22, 23, 9, 21], [8, 23, 19, 7, 22, 18, 6, 13, 12, 20, 15, 4, 11, 21, 14, 1, 9, 2, 16, 10, 24, 3, 25, 17, 5], [12, 15, 21, 19, 8, 2, 16, 6, 18, 5, 7, 1, 17, 3, 9, 14, 25, 4, 24, 22, 13, 23, 11, 10, 20], [14, 10, 11, 2, 24, 1, 25, 22, 20, 4, 21, 23, 6, 19, 18, 13, 5, 8, 12, 3, 17, 16, 7, 15, 9], [23, 7, 22, 17, 1, 24, 13, 3, 15, 10, 20, 8, 5, 4, 25, 9, 16, 19, 21, 11, 2, 6, 18, 12, 14], [18, 16, 5, 25, 3, 9, 23, 14, 8, 11, 13, 2, 15, 10, 12, 20, 7, 1, 17, 6, 22, 21, 4, 24, 19], [13, 9, 6, 4, 20, 19, 12, 21, 17, 7, 11, 16, 24, 14, 22, 2, 10, 18, 15, 23, 5, 25, 8, 1, 3], [20, 25, 7, 22, 2, 23, 17, 10, 1, 18, 5, 24, 12, 13, 4, 21, 11, 6, 19, 14, 3, 9, 15, 8, 16], [1, 24, 18, 23, 6, 4, 7, 20, 13, 21, 8, 15, 3, 17, 19, 16, 2, 12, 9, 5, 11, 14, 10, 25, 22], [5, 19, 12, 13, 11, 22, 15, 9, 24, 14, 25, 6, 20, 2, 16, 4, 8, 10, 3, 17, 18, 7, 21, 23, 1], [21, 8, 4, 10, 14, 16, 3, 25, 6, 12, 22, 7, 18, 9, 11, 23, 13, 15, 20, 1, 19, 24, 5, 2, 17], [17, 3, 16, 15, 9, 5, 8, 2, 11, 19, 14, 21, 10, 1, 23, 7, 24, 22, 25, 18, 20, 13, 12, 4, 6], [15, 6, 20, 11, 21, 10, 14, 4, 5, 22, 16, 9, 25, 8, 3, 24, 12, 13, 2, 19, 23, 1, 17, 18, 7], [3, 13, 8, 18, 19, 17, 1, 16, 21, 25, 10, 12, 7, 24, 6, 11, 15, 23, 22, 4, 14, 5, 9, 20, 2], [9, 1, 23, 14, 4, 6, 24, 12, 7, 8, 19, 11, 2, 18, 13, 17, 3, 20, 5, 21, 25, 15, 22, 16, 10], [10, 22, 2, 12, 25, 13, 18, 15, 9, 23, 17, 5, 14, 20, 21, 8, 1, 16, 6, 7, 4, 19, 3, 11, 24], [7, 5, 17, 24, 16, 20, 2, 11, 19, 3, 23, 22, 4, 15, 1, 18, 14, 9, 10, 25, 6, 8, 13, 21, 12], [11, 20, 9, 3, 7, 15, 22, 17, 10, 1, 12, 19, 21, 23, 24, 25, 6, 14, 4, 8, 16, 18, 2, 5, 13], [19, 2, 24, 8, 10, 12, 20, 7, 4, 13, 18, 3, 9, 22, 15, 5, 23, 21, 11, 16, 1, 17, 6, 14, 25], [22, 21, 25, 1, 18, 8, 5, 23, 14, 6, 4, 17, 16, 11, 2, 19, 20, 3, 13, 9, 10, 12, 24, 7, 15], [4, 17, 14, 16, 23, 21, 19, 18, 25, 2, 6, 10, 13, 7, 5, 12, 22, 24, 1, 15, 9, 11, 20, 3, 8], [6, 12, 15, 5, 13, 3, 11, 24, 16, 9, 1, 14, 8, 25, 20, 10, 18, 17, 7, 2, 21, 4, 19, 22, 23]]

from pwn import *
p = process("./chall")
for i in range(25):
    for j in range(25):
        if temp[i][j] == 0:
            p.recvuntil(b"Row [1-25] (-1 to check win): ")
            p.sendline(str(i+1).encode())
            p.recvuntil(b"Column [1-25]: ")
            p.sendline(str(j+1).encode())
            p.recvuntil(b"Troups [1-25]: ")
            p.sendline(str(board_solve[i][j]).encode())
p.interactive()

# TRX{H0w_0ft3n_d0_y0u_th1nk_4b0ut_th3_R0m4n_3mp1r3?!?:D}

